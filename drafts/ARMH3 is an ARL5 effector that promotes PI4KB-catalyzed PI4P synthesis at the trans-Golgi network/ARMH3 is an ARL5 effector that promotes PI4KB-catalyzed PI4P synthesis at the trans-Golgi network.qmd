---
title: "Normalizing"
subtitle: "Data From Fig 6c -- ARMH3 is an ARL5 effector that promotes PI4KB-catalyzed PI4P synthesis at the trans-Golgi network"
author: "Jeff Walker"
date: '20 Aug 2024'
date-modified: "`r Sys.Date()`"
categories: ["nested subsampling", "linear mixed model", "ggplot", "simulation"]
description: "xxx"
draft: true
format: 
  html: 
    toc: true 
    toc-location: right
execute: 
  freeze: true
  message: false
  warning: false
editor_options: 
  chunk_output_type: inline
---

```{r}
# ![ggplot better-than-replication of Fig 2b from the article. It's better because the plot shows the nested subsampling design...and the p-values account for this design](../../figs/ER calcium depletion as a key driver for impaired ER-to-mitochondria calcium transfer and mitochondrial dysfunction in Wolfram syndrome/fig2b_ggplot.png){width=4in fig-align="left"}
```


## Vital info

Data From: [Ishida, M., Golding, A.E., Keren-Kaplan, T. et al. ARMH3 is an ARL5 effector that promotes PI4KB-catalyzed PI4P synthesis at the trans-Golgi network. Nat Commun 15, 10168 (2024). https://doi.org/10.1038/s41467-024-54410-y](https://www.nature.com/articles/s41467-024-54410-y){target="_blank"}

key words: 

Published methods: One way ANOVA with Tukey

Design:  

Response: 

Key learning concepts: 

More info: [Chapter 16 Models for non-independence -- linear mixed models](https://www.middleprofessor.com/files/applied-biostatistics_bookdown/_book/lmm){target="_blank"}

## TL;DR


## Setup

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

# wrangling packages
library(here) # here makes a project transportable
library(janitor) # clean_names
library(readxl) # read excel, duh!
library(writexl) # write excel, duh!
library(data.table) # magical data frames
library(magrittr) # pipes
library(stringr) # string functions
library(forcats) # factor functions

# analysis packages
library(emmeans) # the workhorse for inference
library(nlme) # gls and some lmm
library(lme4) # linear mixed models
library(lmerTest) # linear mixed model inference
library(afex) # ANOVA linear models
library(glmmTMB) # generalized linear models
library(MASS) # negative binomial and some other functions
library(car) # model checking and ANOVA
library(DHARMa) # model checking
library(mvtnorm)
library(MHTdiscrete) # sidak

# graphing packages
library(ggsci) # color palettes
library(ggpubr) # publication quality plots
library(ggforce) # better jitter
library(cowplot) # combine plots
library(knitr) # kable tables
library(kableExtra) # kable_styling tables

# ggplot_the_model.R packages not loaded above
library(insight)
library(lazyWeave)

# use here from the here package
here <- here::here
# use clean_names from the janitor package
clean_names <- janitor::clean_names
# use transpose from data.table
transpose <- data.table::transpose

# load functions used by this text written by me
# ggplot_the_model.R needs to be in the folder "R"
# if you didn't download this and add to your R folder in your
# project, then this line will cause an error
source_path <- here("R", "ggplot_the_model.R")
source(source_path)
source_path <- here("R", "ggptm.R")
source(source_path)

data_folder <- "data from"
image_folder <- "images"
output_folder <- "output"
```

## Fig 3b -- proportion

```{r}
data_from <- "ARMH3 is an ARL5 effector that promotes PI4KB-catalyzed PI4P synthesis at the trans-Golgi network"
file_name <- "Source Data.xlsx"
file_path <- here(data_folder, data_from, file_name)

```

## Fig 6c -- normalization, blocking

```{r fig6c-import, message=FALSE, warning=FALSE}
data_from <- "ARMH3 is an ARL5 effector that promotes PI4KB-catalyzed PI4P synthesis at the trans-Golgi network"
file_name <- "Source Data.xlsx"
file_path <- here(data_folder, data_from, file_name)

import_fig6c <- function(range_in, exp_id){
  fig6c_wide <- read_excel(file_path,
             sheet = "Fig6c",
             range = range_in,
             col_names = TRUE) |>
    data.table() 
  colnames(fig6c_wide)[1] <- "date"
  fig6c_wide[, date := as.character(date)]
  fig6c_wide[, date := fill_down(date)]
  fig6c_wide[, exp := paste("exp", exp_id)]
  fig6c_long <- melt(fig6c_wide,
                     id.vars = c("exp", "date"),
                     variable.name = "treatment",
                     value.name = "intensity"
                     ) |>
    na.omit()
  return(fig6c_long)
}
fig6c <- import_fig6c("D1:H16", 1)
fig6c <- rbind(fig6c,
               import_fig6c("K1:O23", 2))
fig6c <- rbind(fig6c,
               import_fig6c("R1:V23", 3))
fig6c <- rbind(fig6c,
               import_fig6c("X1:AA23", 4))
# output as clean excel file
# fileout_name <- "xxx.xlsx"
# fileout_path <- here(data_folder, data_from, fileout_name)
# write_xlsx(fig1h, fileout_path)
```

# means

```{r}
fig6c[, intensity_std := intensity/mean(intensity[treatment == "WT"]), by = .(exp)]
fig6c_means <- fig6c[, .(intensity = mean(intensity),
                        intensity_norm = mean(intensity_std)), by = .(exp, treatment)]
```

# what authors did, except...

I cannot recover using tukey. dunnet is close

```{r}
lm0 <- lm(intensity_norm ~ treatment, data = fig6c_means)
lm0_pairs <- emmeans(lm0, specs = "treatment") |>
  contrast(method = "dunnett") |>
  summary(infer = TRUE)
lm0_pairs |>
  kable() |>
  kable_styling()
```

# better in spirit of authors

```{r}
t.test(fig6c_means[treatment == "ARL5", intensity_norm],
       mu = 1)$p.value
t.test(fig6c_means[treatment == "ARMH3", intensity_norm],
       mu = 1)$p.value
t.test(fig6c_means[treatment == "VPS54", intensity_norm],
       mu = 1)$p.value
```

# better still

```{r}

lm1 <- lm(intensity_norm ~ treatment, data = fig6c_means)
lm1_pairs <- emmeans(lm1, specs = "treatment") |>
  contrast(method = "revpairwise", adjust = "none") |>
  summary(infer = TRUE)
lm1_pairs[c(1,2,4),] |>
  kable() |>
  kable_styling()

lmm1 <- lmer(intensity ~ treatment + (treatment | exp), data = fig6c)
lmm1 <- lmer(intensity ~ treatment + (1 | exp), data = fig6c_means)
lmm1_pairs <- emmeans(lmm1, specs = "treatment") |>
  contrast(method = "revpairwise", adjust = "none") |>
  summary(infer = TRUE)
lmm1_pairs[c(1,2,4),] |>
  kable() |>
  kable_styling()

pptt1 <- pptt(intensity ~ treatment + (1 | exp), data = fig6c)
pptt1[c(1,2,4),] |>
  kable() |>
  kable_styling()

 


```


# tnorm v tstd

```{r}
t.test(fig6c_means[treatment == "WT", intensity],
       fig6c_means[treatment == "ARL5", intensity],
       paired = TRUE)
t.test(fig6c_means[treatment == "WT", intensity_norm],
       fig6c_means[treatment == "ARL5", intensity_norm],
       var.equal = TRUE)
t.test(fig6c_means[treatment == "ARL5", intensity_norm],
       mu = 1)
```

```{r}
t.test(fig6c_means[treatment == "WT", intensity],
       fig6c_means[treatment == "ARMH3", intensity],
       paired = TRUE)
t.test(fig6c_means[treatment == "WT", intensity_norm],
       fig6c_means[treatment == "ARMH3", intensity_norm],
       var.equal = TRUE)
```

```{r}
t.test(fig6c_means[treatment == "WT", intensity][1:3],
       fig6c_means[treatment == "VPS54", intensity],
       paired = TRUE)
t.test(fig6c_means[treatment == "WT", intensity_norm],
       fig6c_means[treatment == "VPS54", intensity_norm],
       var.equal = TRUE)
```
