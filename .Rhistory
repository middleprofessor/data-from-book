sample(1:n2, n)
diff(1:n2, s1)
setdiff(1:n2, s1)
?set(diff)
?union
?setdiff
s1 <- sample(1:n2, n)
s2 <- setdiff(s1, 1:n2, )
setdiff(s1, 1:n2)
setdiff(1:n2, s1)
s1
split_t(tngfr_teff)
split_t(tngfr_teff)
split_t(tngfr_teff)
split_t(tngfr_teff)
split_t <- function(y){
n2 <- length(y)
n <- floor(n/2)
inc1 <- sample(1:n2, n)
inc2 <- setdiff(1:n2, inc1)
s1 <- c(y[inc1], y[inc1])
s2 <- c(y[inc2], y[inc2])
p <- t.test(s1,s2)$p.value
return(p)
}
split_t(tngfr_teff)
split_t(tngfr_teff)
split_t(tngfr_teff)
split_t(tngfr_teff)
split_t(tngfr_teff)
split_t(tngfr_teff)
split_t(tngfr_teff)
split_t(tngfr_teff)
split_t(tngfr_teff)
split_t(tngfr_teff)
n_reps <- 100
tngfr_teff <- fig4h[treatment == "tNGFR", teff] |>
na.omit()
fox_teff <- fig4h[treatment == "FOXO1OE", teff] |>
na.omit()
tngfr_trm <- fig4h[treatment == "tNGFR", trm] |>
na.omit()
fox_trm <- fig4h[treatment == "FOXO1OE", trm] |>
na.omit()
tngfr_bulk <- fig4h[treatment == "tNGFR", bulk] |>
na.omit()
fox_bulk <- fig4h[treatment == "FOXO1OE", bulk] |>
na.omit()
n <- length(tngfr_teff)
p_matrix <- matrix(as.numeric(NA), nrow = n_reps, ncol = 7)
colnames(p_matrix) <- colnames(d_out) <- c("tNGFR_TEFF", "tNGFR_TRM", "tNGFR_Bulk",
"FOX01_TEFF", "FOX01_TRM", "FOX01_Bulk",
"Control")
dim(p_matrix)
n_reps <- 100
tngfr_teff <- fig4h[treatment == "tNGFR", teff] |>
na.omit()
fox_teff <- fig4h[treatment == "FOXO1OE", teff] |>
na.omit()
tngfr_trm <- fig4h[treatment == "tNGFR", trm] |>
na.omit()
fox_trm <- fig4h[treatment == "FOXO1OE", trm] |>
na.omit()
tngfr_bulk <- fig4h[treatment == "tNGFR", bulk] |>
na.omit()
fox_bulk <- fig4h[treatment == "FOXO1OE", bulk] |>
na.omit()
n <- length(tngfr_teff)
p_matrix <- matrix(as.numeric(NA), nrow = n_reps, ncol = 7)
colnames(p_matrix) <- c("tNGFR_TEFF", "tNGFR_TRM", "tNGFR_Bulk",
"FOX01_TEFF", "FOX01_TRM", "FOX01_Bulk",
"Control")
split_t <- function(y){
n2 <- length(y)
n <- floor(n/2)
inc1 <- sample(1:n2, n)
inc2 <- setdiff(1:n2, inc1)
s1 <- c(y[inc1], y[inc1])
s2 <- c(y[inc2], y[inc2])
p <- t.test(s1,s2)$p.value
return(p)
}
for(rep_i in 1:n_reps){
p_matrix[, tNGFR_TEFF] <- split_t(tngfr_teff)
p_matrix[, FOX01_TEFF] <- split_t(fox_teff)
p_matrix[, tNGFR_TRM] <- split_t(tngfr_trm)
p_matrix[, FOX01_TRM] <- split_t(fox_trm)
p_matrix[, tNGFR_Bulk] <- split_t(tngfr_bulk)
p_matrix[, FOX01_Bulk] <- split_t(fox_bulk)
p_matrix[, Control] <- split_t(rnorm(n))
}
colnames(p_matrix)
n_reps <- 100
tngfr_teff <- fig4h[treatment == "tNGFR", teff] |>
na.omit()
fox_teff <- fig4h[treatment == "FOXO1OE", teff] |>
na.omit()
tngfr_trm <- fig4h[treatment == "tNGFR", trm] |>
na.omit()
fox_trm <- fig4h[treatment == "FOXO1OE", trm] |>
na.omit()
tngfr_bulk <- fig4h[treatment == "tNGFR", bulk] |>
na.omit()
fox_bulk <- fig4h[treatment == "FOXO1OE", bulk] |>
na.omit()
n <- length(tngfr_teff)
p_matrix <- matrix(as.numeric(NA), nrow = n_reps, ncol = 7)
colnames(p_matrix) <- c("tNGFR_TEFF", "tNGFR_TRM", "tNGFR_Bulk",
"FOX01_TEFF", "FOX01_TRM", "FOX01_Bulk",
"Control")
split_t <- function(y){
n2 <- length(y)
n <- floor(n/2)
inc1 <- sample(1:n2, n)
inc2 <- setdiff(1:n2, inc1)
s1 <- c(y[inc1], y[inc1])
s2 <- c(y[inc2], y[inc2])
p <- t.test(s1,s2)$p.value
return(p)
}
for(rep_i in 1:n_reps){
p_matrix[, "tNGFR_TEFF"] <- split_t(tngfr_teff)
p_matrix[, "FOX01_TEFF"] <- split_t(fox_teff)
p_matrix[, "tNGFR_TRM"] <- split_t(tngfr_trm)
p_matrix[, "FOX01_TRM"] <- split_t(fox_trm)
p_matrix[, "tNGFR_Bulk"] <- split_t(tngfr_bulk)
p_matrix[, "FOX01_Bulk"] <- split_t(fox_bulk)
p_matrix[, "Control"] <- split_t(rnorm(n))
}
p_matrix
split_t(tngfr_teff)
split_t(tngfr_teff)
n_reps <- 2000
tngfr_teff <- fig4h[treatment == "tNGFR", teff] |>
na.omit()
fox_teff <- fig4h[treatment == "FOXO1OE", teff] |>
na.omit()
tngfr_trm <- fig4h[treatment == "tNGFR", trm] |>
na.omit()
fox_trm <- fig4h[treatment == "FOXO1OE", trm] |>
na.omit()
tngfr_bulk <- fig4h[treatment == "tNGFR", bulk] |>
na.omit()
fox_bulk <- fig4h[treatment == "FOXO1OE", bulk] |>
na.omit()
n <- length(tngfr_teff)
p_matrix <- matrix(as.numeric(NA), nrow = n_reps, ncol = 7)
colnames(p_matrix) <- c("tNGFR_TEFF", "tNGFR_TRM", "tNGFR_Bulk",
"FOX01_TEFF", "FOX01_TRM", "FOX01_Bulk",
"Control")
split_t <- function(y){
n2 <- length(y)
n <- floor(n/2)
inc1 <- sample(1:n2, n)
inc2 <- setdiff(1:n2, inc1)
s1 <- c(y[inc1], y[inc1])
s2 <- c(y[inc2], y[inc2])
p <- t.test(s1,s2)$p.value
return(p)
}
for(rep_i in 1:n_reps){
p_matrix[rep_i, "tNGFR_TEFF"] <- split_t(tngfr_teff)
p_matrix[rep_i, "FOX01_TEFF"] <- split_t(fox_teff)
p_matrix[rep_i, "tNGFR_TRM"] <- split_t(tngfr_trm)
p_matrix[rep_i, "FOX01_TRM"] <- split_t(fox_trm)
p_matrix[rep_i, "tNGFR_Bulk"] <- split_t(tngfr_bulk)
p_matrix[rep_i, "FOX01_Bulk"] <- split_t(fox_bulk)
p_matrix[rep_i, "Control"] <- split_t(rnorm(n))
}
less_than <- function(x, alpha = 0.05){
return(sum(x < alpha)/length(x))
}
apply(p_matrix, 2, less_than)
n_reps <- 2000
tngfr_teff <- fig4h[treatment == "tNGFR", teff] |>
na.omit()
fox_teff <- fig4h[treatment == "FOXO1OE", teff] |>
na.omit()
tngfr_trm <- fig4h[treatment == "tNGFR", trm] |>
na.omit()
fox_trm <- fig4h[treatment == "FOXO1OE", trm] |>
na.omit()
tngfr_bulk <- fig4h[treatment == "tNGFR", bulk] |>
na.omit()
fox_bulk <- fig4h[treatment == "FOXO1OE", bulk] |>
na.omit()
n <- length(tngfr_teff)
p_matrix <- matrix(as.numeric(NA), nrow = n_reps, ncol = 7)
colnames(p_matrix) <- c("tNGFR_TEFF", "tNGFR_TRM", "tNGFR_Bulk",
"FOX01_TEFF", "FOX01_TRM", "FOX01_Bulk",
"Control")
split_t <- function(y){
n2 <- length(y)
n <- floor(n/2)
inc1 <- sample(1:n2, n)
inc2 <- setdiff(1:n2, inc1)
s1 <- y[inc1] #c(y[inc1], y[inc1])
s2 <- y[inc2] #c(y[inc2], y[inc2])
p <- t.test(s1,s2)$p.value
return(p)
}
less_than <- function(x, alpha = 0.05){
return(sum(x < alpha)/length(x))
}
for(rep_i in 1:n_reps){
p_matrix[rep_i, "tNGFR_TEFF"] <- split_t(tngfr_teff)
p_matrix[rep_i, "FOX01_TEFF"] <- split_t(fox_teff)
p_matrix[rep_i, "tNGFR_TRM"] <- split_t(tngfr_trm)
p_matrix[rep_i, "FOX01_TRM"] <- split_t(fox_trm)
p_matrix[rep_i, "tNGFR_Bulk"] <- split_t(tngfr_bulk)
p_matrix[rep_i, "FOX01_Bulk"] <- split_t(fox_bulk)
p_matrix[rep_i, "Control"] <- split_t(rnorm(n))
}
apply(p_matrix, 2, less_than)
split_t2 <- function(y, n = 5){
s1 <- sample(y, n)
s2 <- sample(y, n)
p <- t.test(s1,s2)$p.value
return(p)
}
n_reps <- 2000
tngfr_teff <- fig4h[treatment == "tNGFR", teff] |>
na.omit()
fox_teff <- fig4h[treatment == "FOXO1OE", teff] |>
na.omit()
tngfr_trm <- fig4h[treatment == "tNGFR", trm] |>
na.omit()
fox_trm <- fig4h[treatment == "FOXO1OE", trm] |>
na.omit()
tngfr_bulk <- fig4h[treatment == "tNGFR", bulk] |>
na.omit()
fox_bulk <- fig4h[treatment == "FOXO1OE", bulk] |>
na.omit()
n <- length(tngfr_teff)
p_matrix <- matrix(as.numeric(NA), nrow = n_reps, ncol = 7)
colnames(p_matrix) <- c("tNGFR_TEFF", "tNGFR_TRM", "tNGFR_Bulk",
"FOX01_TEFF", "FOX01_TRM", "FOX01_Bulk",
"Control")
split_t <- function(y){
n2 <- length(y)
n <- floor(n/2)
inc1 <- sample(1:n2, n)
inc2 <- setdiff(1:n2, inc1)
s1 <- y[inc1] #c(y[inc1], y[inc1])
s2 <- y[inc2] #c(y[inc2], y[inc2])
p <- t.test(s1,s2)$p.value
return(p)
}
split_t2 <- function(y, n = 5){
s1 <- sample(y, n)
s2 <- sample(y, n)
p <- t.test(s1,s2)$p.value
return(p)
}
less_than <- function(x, alpha = 0.05){
return(sum(x < alpha)/length(x))
}
for(rep_i in 1:n_reps){
p_matrix[rep_i, "tNGFR_TEFF"] <- split_t2(tngfr_teff)
p_matrix[rep_i, "FOX01_TEFF"] <- split_t2(fox_teff)
p_matrix[rep_i, "tNGFR_TRM"] <- split_t2(tngfr_trm)
p_matrix[rep_i, "FOX01_TRM"] <- split_t2(fox_trm)
p_matrix[rep_i, "tNGFR_Bulk"] <- split_t2(tngfr_bulk)
p_matrix[rep_i, "FOX01_Bulk"] <- split_t2(fox_bulk)
p_matrix[rep_i, "Control"] <- split_t2(rnorm(n=10))
}
apply(p_matrix, 2, less_than)
rnorm(n=10)
n_reps <- 2000
tngfr_teff <- fig4h[treatment == "tNGFR", teff] |>
na.omit()
fox_teff <- fig4h[treatment == "FOXO1OE", teff] |>
na.omit()
tngfr_trm <- fig4h[treatment == "tNGFR", trm] |>
na.omit()
fox_trm <- fig4h[treatment == "FOXO1OE", trm] |>
na.omit()
tngfr_bulk <- fig4h[treatment == "tNGFR", bulk] |>
na.omit()
fox_bulk <- fig4h[treatment == "FOXO1OE", bulk] |>
na.omit()
n <- length(tngfr_teff)
p_matrix <- matrix(as.numeric(NA), nrow = n_reps, ncol = 7)
colnames(p_matrix) <- c("tNGFR_TEFF", "tNGFR_TRM", "tNGFR_Bulk",
"FOX01_TEFF", "FOX01_TRM", "FOX01_Bulk",
"Control")
split_t <- function(y){
n2 <- length(y)
n <- floor(n/2)
inc1 <- sample(1:n2, n)
inc2 <- setdiff(1:n2, inc1)
s1 <- y[inc1] #c(y[inc1], y[inc1])
s2 <- y[inc2] #c(y[inc2], y[inc2])
p <- t.test(s1,s2)$p.value
return(p)
}
split_t2 <- function(y, n = 5){
s1 <- sample(y, n)
s2 <- sample(y, n)
p <- t.test(s1,s2)$p.value
return(p)
}
less_than <- function(x, alpha = 0.05){
return(sum(x < alpha)/length(x))
}
for(rep_i in 1:n_reps){
p_matrix[rep_i, "tNGFR_TEFF"] <- split_t2(tngfr_teff)
p_matrix[rep_i, "FOX01_TEFF"] <- split_t2(fox_teff)
p_matrix[rep_i, "tNGFR_TRM"] <- split_t2(tngfr_trm)
p_matrix[rep_i, "FOX01_TRM"] <- split_t2(fox_trm)
p_matrix[rep_i, "tNGFR_Bulk"] <- split_t2(tngfr_bulk)
p_matrix[rep_i, "FOX01_Bulk"] <- split_t2(fox_bulk)
p_matrix[rep_i, "Control"] <- split_t2(rnorm(n))
}
apply(p_matrix, 2, less_than)
table_out
knitr::opts_chunk$set(echo = TRUE)
# wrangling packages
library(here) # here makes a project transportable
library(janitor) # clean_names
library(readxl) # read excel, duh!
library(writexl) # write excel, duh!
library(data.table) # magical data frames
library(magrittr) # pipes
library(stringr) # string functions
library(forcats) # factor functions
# analysis packages
library(emmeans) # the workhorse for inference
library(nlme) # gls and some lmm
library(lme4) # linear mixed models
library(lmerTest) # linear mixed model inference
library(afex) # ANOVA linear models
library(glmmTMB) # generalized linear models
library(MASS) # negative binomial and some other functions
library(car) # model checking and ANOVA
library(DHARMa) # model checking
library(mvtnorm)
# graphing packages
library(ggsci) # color palettes
library(ggpubr) # publication quality plots
library(ggforce) # better jitter
library(cowplot) # combine plots
library(knitr) # kable tables
library(kableExtra) # kable_styling tables
# ggplot_the_model.R packages not loaded above
library(insight)
library(lazyWeave)
# use here from the here package
here <- here::here
# use clean_names from the janitor package
clean_names <- janitor::clean_names
# use transpose from data.table
transpose <- data.table::transpose
# load functions used by this text written by me
# ggplot_the_model.R needs to be in the folder "R"
# if you didn't download this and add to your R folder in your
# project, then this line will cause an error
source_path <- here("R", "ggplot_the_model.R")
source(source_path)
data_folder <- "data from"
image_folder <- "images"
output_folder <- "output"
data_from <- "FOXO1 is a master regulator of memory programming in CAR T cells"
file_name <- "FOXO1 is a master regulator of memory programming in CAR T cells.xlsx"
file_path <- here(data_folder, data_from, file_name)
fig4h_wide <- read_excel(file_path,
sheet = "Figure 4i",
range = "A4:h7659",
col_names = TRUE) |>
data.table()
setnames(fig4h_wide,
old = names(fig4h_wide),
new = c("tNGFR_teff", "FOXO1OE_teff", "x1",
"tNGFR_trm", "FOXO1OE_trm", "x2",
"tNGFR_bulk", "FOXO1OE_bulk"))
fig4h_wide <- fig4h_wide[, .SD, .SDcols = c("tNGFR_teff", "FOXO1OE_teff",
"tNGFR_trm", "FOXO1OE_trm",
"tNGFR_bulk", "FOXO1OE_bulk")]
fig4h <- melt(fig4h_wide,
measure.vars = list(c("tNGFR_teff", "FOXO1OE_teff"),
c("tNGFR_trm", "FOXO1OE_trm"),
c("tNGFR_bulk", "FOXO1OE_bulk")),
variable.name = "treatment_code",
value.name = c("teff", "trm", "bulk"))
fig4h[, treatment := ifelse(treatment_code == 1, "tNGFR", "FOXO1OE") |>
factor(levels = c("tNGFR", "FOXO1OE"))]
knitr::opts_chunk$set(echo = TRUE)
# wrangling packages
library(here) # here makes a project transportable
library(janitor) # clean_names
library(readxl) # read excel, duh!
library(writexl) # write excel, duh!
library(data.table) # magical data frames
library(magrittr) # pipes
library(stringr) # string functions
library(forcats) # factor functions
# analysis packages
library(emmeans) # the workhorse for inference
library(nlme) # gls and some lmm
library(lme4) # linear mixed models
library(lmerTest) # linear mixed model inference
library(afex) # ANOVA linear models
library(glmmTMB) # generalized linear models
library(MASS) # negative binomial and some other functions
library(car) # model checking and ANOVA
library(DHARMa) # model checking
library(mvtnorm)
# graphing packages
library(ggsci) # color palettes
library(ggpubr) # publication quality plots
library(ggforce) # better jitter
library(cowplot) # combine plots
library(knitr) # kable tables
library(kableExtra) # kable_styling tables
# ggplot_the_model.R packages not loaded above
library(insight)
library(lazyWeave)
# use here from the here package
here <- here::here
# use clean_names from the janitor package
clean_names <- janitor::clean_names
# use transpose from data.table
transpose <- data.table::transpose
# load functions used by this text written by me
# ggplot_the_model.R needs to be in the folder "R"
# if you didn't download this and add to your R folder in your
# project, then this line will cause an error
source_path <- here("R", "ggplot_the_model.R")
source(source_path)
data_folder <- "data from"
image_folder <- "images"
output_folder <- "output"
data_from <- "FOXO1 is a master regulator of memory programming in CAR T cells"
file_name <- "FOXO1 is a master regulator of memory programming in CAR T cells.xlsx"
file_path <- here(data_folder, data_from, file_name)
fig4h_wide <- read_excel(file_path,
sheet = "Figure 4i",
range = "A4:h7659",
col_names = TRUE) |>
data.table()
setnames(fig4h_wide,
old = names(fig4h_wide),
new = c("tNGFR_teff", "FOXO1OE_teff", "x1",
"tNGFR_trm", "FOXO1OE_trm", "x2",
"tNGFR_bulk", "FOXO1OE_bulk"))
fig4h_wide <- fig4h_wide[, .SD, .SDcols = c("tNGFR_teff", "FOXO1OE_teff",
"tNGFR_trm", "FOXO1OE_trm",
"tNGFR_bulk", "FOXO1OE_bulk")]
fig4h <- melt(fig4h_wide,
measure.vars = list(c("tNGFR_teff", "FOXO1OE_teff"),
c("tNGFR_trm", "FOXO1OE_trm"),
c("tNGFR_bulk", "FOXO1OE_bulk")),
variable.name = "treatment_code",
value.name = c("teff", "trm", "bulk"))
fig4h[, treatment := ifelse(treatment_code == 1, "tNGFR", "FOXO1OE") |>
factor(levels = c("tNGFR", "FOXO1OE"))]
knitr::opts_chunk$set(echo = TRUE)
# wrangling packages
library(here) # here makes a project transportable
library(janitor) # clean_names
library(readxl) # read excel, duh!
library(writexl) # write excel, duh!
library(data.table) # magical data frames
library(magrittr) # pipes
library(stringr) # string functions
library(forcats) # factor functions
# analysis packages
library(emmeans) # the workhorse for inference
library(nlme) # gls and some lmm
library(lme4) # linear mixed models
library(lmerTest) # linear mixed model inference
library(afex) # ANOVA linear models
library(glmmTMB) # generalized linear models
library(MASS) # negative binomial and some other functions
library(car) # model checking and ANOVA
library(DHARMa) # model checking
library(mvtnorm)
# graphing packages
library(ggsci) # color palettes
library(ggpubr) # publication quality plots
library(ggforce) # better jitter
library(cowplot) # combine plots
library(knitr) # kable tables
library(kableExtra) # kable_styling tables
# ggplot_the_model.R packages not loaded above
library(insight)
library(lazyWeave)
# use here from the here package
here <- here::here
# use clean_names from the janitor package
clean_names <- janitor::clean_names
# use transpose from data.table
transpose <- data.table::transpose
# load functions used by this text written by me
# ggplot_the_model.R needs to be in the folder "R"
# if you didn't download this and add to your R folder in your
# project, then this line will cause an error
source_path <- here("R", "ggplot_the_model.R")
source(source_path)
data_folder <- "data"
image_folder <- "images"
output_folder <- "output"
data_from <- "Paternal microbiome perturbations impact offspring fitness"
file_name <- "41586_2024_7336_MOESM4_ESM.xlsx"
file_path <- here(data_folder, data_from, file_name)
fig2h <- read_excel(file_path,
sheet = "6wk.IVF.CD1_CON-nABX Fig.2H",
range = "a2:n156",
na = c("N.D", "ND", "N.D.", "Born dead", "Born dead ", "Died at P3"),
col_names = TRUE) |>
clean_names() |>
data.table()
