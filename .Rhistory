p_format(digits = 4, #rstatix package
accuracy = 1e-04,
add.p = TRUE),
y.position = fig3g[, max(get(y_col))] +
0.05*(fig3g[, max(get(y_col))] - fig3g[, min(get(y_col))])
)
gg <- gg +
stat_pvalue_manual(
data = p_table,
tip.length = 0.001)
return(gg)
}
gg_list <- list()
for(i in 1:length(y_list)){
m1 <- fig3g_lmm1[[y_list[i]]]
m1_emm <- fig3g_lmm1_emm[[y_list[i]]]
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
# use the sidak p-values
m1_pairs[, p.value := p_sidak]
gg <- plot_it(y_col = y_list[i], m1_pairs)
gg_list[[y_list[i]]] <- gg
}
plot_grid(plotlist = gg_list, nrow = 2)
m1_pairs
names(m1_pairs)
# create a column of sidak adjusted p-values in the contrast tables
for(i in 1:length(y_list)){ # over the 6 responses
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
m1_pairs[3:4, p_sidak := Sidak.p.adjust(p.value)]
fig3g_lmm1_pairs[[y_list[i]]] <- m1_pairs
}
# make a pretty output table
contrast_table <- data.table(NULL)
keep_cols <- c("tx", "contrast", "estimate", "lower.CL", "upper.CL", "p_sidak")
for(i in 1:length(y_list)){ # over the 6 responses
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
contrast_table <- rbind(contrast_table,
m1_pairs[3:4, .SD, .SDcols = keep_cols])
}
contrast_table
contrast_table |>
kable(digits = 4) |>
pack_rows(y_list[1], 1, 2) |>
pack_rows(y_list[2], 3, 4) |>
pack_rows(y_list[3], 5, 6) |>
pack_rows(y_list[4], 7, 8) |>
pack_rows(y_list[5], 9, 10) |>
pack_rows(y_list[6], 11, 12)
contrast_table |>
kable(digits = 4) |>
kable_styling() |>
pack_rows(y_list[1], 1, 2) |>
pack_rows(y_list[2], 3, 4) |>
pack_rows(y_list[3], 5, 6) |>
pack_rows(y_list[4], 7, 8) |>
pack_rows(y_list[5], 9, 10) |>
pack_rows(y_list[6], 11, 12)
pack_rows(y_list[1], 1, 2) |>
i <- 1
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
m1_pairs[3:4, p_sidak := Sidak.p.adjust(p.value)]
m1_pairs
knitr::opts_chunk$set(echo = TRUE)
# wrangling packages
library(here) # here makes a project transportable
library(janitor) # clean_names
library(readxl) # read excel, duh!
library(data.table) # magical data frames
library(magrittr) # pipes
library(stringr) # string functions
library(forcats) # factor functions
# analysis packages
library(emmeans) # the workhorse for inference
library(nlme) # gls and some lmm
library(lme4) # linear mixed models
library(lmerTest) # linear mixed model inference
library(afex) # ANOVA linear models
library(glmmTMB) # generalized linear models
library(MASS) # negative binomial and some other functions
library(car) # model checking and ANOVA
library(DHARMa) # model checking
library(mvtnorm)
library(MHTdiscrete) # sidak
# graphing packages
library(ggsci) # color palettes
library(ggpubr) # publication quality plots
library(ggforce) # better jitter
library(cowplot) # combine plots
library(knitr) # kable tables
library(kableExtra) # kable_styling tables
# ggplot_the_model.R packages not loaded above
library(insight)
library(lazyWeave)
# use here from the here package
here <- here::here
# use clean_names from the janitor package
clean_names <- janitor::clean_names
# use transpose from data.table
transpose <- data.table::transpose
# load functions used by this text written by me
# ggplot_the_model.R needs to be in the folder "R"
# if you didn't download this and add to your R folder in your
# project, then this line will cause an error
source_path <- here("R", "ggplot_the_model.R")
source(source_path)
data_folder <- "data from"
image_folder <- "images"
output_folder <- "output"
data_from <- "The role of somatosensory innervation of adipose tissues"
file_name <- "41586_2022_5137_MOESM7_ESM.xlsx"
file_path <- here(data_folder, data_from, file_name)
fig3g <- read_excel(file_path,
sheet = "3g",
range = "B6:K30",
col_names = TRUE) |>
data.table() |>
clean_names()
fig3g[, surgery := factor(surgery, levels = c("YFP", "Cre"))]
fig3g[, tx := factor(tx, levels = c("SAL", "OHDA"))]
lmm1_fit <- function(y_label){
# y_label is the column name of the response variable
r_formula <- paste(y_label, "~ tx * surgery + (1 | ear_tag)") |>
formula()
lmm1 <- lmer(r_formula, data = fig3g)
return(lmm1)
}
aov1_fit <- function(y_label){
# y_label is the column name of the response variable
r_formula <- paste(y_label, "~ tx * surgery + (surgery | ear_tag)") |>
formula()
aov1 <- aov_4(r_formula, data = fig3g)
return(aov1)
}
fig3g_lmm1 <- list()
fig3g_aov1 <- list()
y_list <- c("ucp1", "elovl3", "cidea", "fasn", "acacb", "ch_reb_pb")
for(i in 1:length(y_list)){
y_label <- y_list[i]
fig3g_lmm1[[y_label]] <- lmm1_fit(y_label)
fig3g_aov1[[y_label]] <- aov1_fit(y_label)
}
# get emmeans using function
emmeans_out <- function(m1){
# m1 is the fit model
m1_emm <- emmeans(m1,
specs = c("tx", "surgery"))
return(m1_emm)
}
fig3g_lmm1_emm <- list()
fig3g_aov1_emm <- list()
for(i in 1:length(y_list)){
y_label <- y_list[i]
fig3g_lmm1_emm[[y_label]] <- emmeans_out(fig3g_lmm1[[y_label]])
fig3g_aov1_emm[[y_label]] <- emmeans_out(fig3g_aov1[[y_label]])
}
pairs_out <- function(m1_emm){
# m1 is the fit model
m1_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE) |>
data.table()
return(m1_pairs)
}
fig3g_lmm1_pairs <- list()
fig3g_aov1_pairs <- list()
for(i in 1:length(y_list)){
y_label <- y_list[i]
fig3g_lmm1_pairs[[y_label]] <- pairs_out(fig3g_lmm1_emm[[y_label]])
fig3g_aov1_pairs[[y_label]] <- pairs_out(fig3g_aov1_emm[[y_label]])
}
anova(fig3g_lmm1[["ucp1"]]) |>
kable(digits = 4,
caption = "LMM fit") |>
kable_styling()
anova(fig3g_aov1[["ucp1"]]) |>
kable(digits = 4, caption = "RM ANOVA fit") |>
kable_styling()
# create a column of sidak adjusted p-values in the contrast tables
for(i in 1:length(y_list)){ # over the 6 responses
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
m1_pairs[3:4, p_sidak := Sidak.p.adjust(p.value)]
fig3g_lmm1_pairs[[y_list[i]]] <- m1_pairs
}
# make a pretty output table
contrast_table <- data.table(NULL)
keep_cols <- c("tx", "contrast", "estimate", "lower.CL", "upper.CL", "p_sidak")
for(i in 1:length(y_list)){ # over the 6 responses
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
contrast_table <- rbind(contrast_table,
m1_pairs[3:4, .SD, .SDcols = keep_cols])
}
contrast_table |>
kable(digits = 4) |>
kable_styling() |>
pack_rows(y_list[1], 1, 2) |>
pack_rows(y_list[2], 3, 4) |>
pack_rows(y_list[3], 5, 6) |>
pack_rows(y_list[4], 7, 8) |>
pack_rows(y_list[5], 9, 10) |>
pack_rows(y_list[6], 11, 12)
i <- 1
m1 <- fig3g_lmm1[[y_list]]
m1 <- fig3g_lmm1[[y_list[i]]]
coef(summary(m1))
knitr::opts_chunk$set(echo = TRUE)
# wrangling packages
library(here) # here makes a project transportable
library(janitor) # clean_names
library(readxl) # read excel, duh!
library(data.table) # magical data frames
library(magrittr) # pipes
library(stringr) # string functions
library(forcats) # factor functions
# analysis packages
library(emmeans) # the workhorse for inference
library(nlme) # gls and some lmm
library(lme4) # linear mixed models
library(lmerTest) # linear mixed model inference
library(afex) # ANOVA linear models
library(glmmTMB) # generalized linear models
library(MASS) # negative binomial and some other functions
library(car) # model checking and ANOVA
library(DHARMa) # model checking
library(mvtnorm)
library(MHTdiscrete) # sidak
# graphing packages
library(ggsci) # color palettes
library(ggpubr) # publication quality plots
library(ggforce) # better jitter
library(cowplot) # combine plots
library(knitr) # kable tables
library(kableExtra) # kable_styling tables
# ggplot_the_model.R packages not loaded above
library(insight)
library(lazyWeave)
# use here from the here package
here <- here::here
# use clean_names from the janitor package
clean_names <- janitor::clean_names
# use transpose from data.table
transpose <- data.table::transpose
# load functions used by this text written by me
# ggplot_the_model.R needs to be in the folder "R"
# if you didn't download this and add to your R folder in your
# project, then this line will cause an error
source_path <- here("R", "ggplot_the_model.R")
source(source_path)
data_folder <- "data from"
image_folder <- "images"
output_folder <- "output"
data_from <- "The role of somatosensory innervation of adipose tissues"
file_name <- "41586_2022_5137_MOESM7_ESM.xlsx"
file_path <- here(data_folder, data_from, file_name)
fig3g <- read_excel(file_path,
sheet = "3g",
range = "B34:K58",
col_names = TRUE) |>
data.table() |>
clean_names()
fig3g[, surgery := factor(surgery, levels = c("YFP", "Cre"))]
fig3g[, tx := factor(tx, levels = c("SAL", "OHDA"))]
lmm1_fit <- function(y_label){
# y_label is the column name of the response variable
r_formula <- paste(y_label, "~ tx * surgery + (1 | ear_tag)") |>
formula()
lmm1 <- lmer(r_formula, data = fig3g)
return(lmm1)
}
aov1_fit <- function(y_label){
# y_label is the column name of the response variable
r_formula <- paste(y_label, "~ tx * surgery + (surgery | ear_tag)") |>
formula()
aov1 <- aov_4(r_formula, data = fig3g)
return(aov1)
}
fig3g_lmm1 <- list()
fig3g_aov1 <- list()
y_list <- c("ucp1", "elovl3", "cidea", "fasn", "acacb", "ch_reb_pb")
for(i in 1:length(y_list)){
y_label <- y_list[i]
fig3g_lmm1[[y_label]] <- lmm1_fit(y_label)
fig3g_aov1[[y_label]] <- aov1_fit(y_label)
}
# get emmeans using function
emmeans_out <- function(m1){
# m1 is the fit model
m1_emm <- emmeans(m1,
specs = c("tx", "surgery"))
return(m1_emm)
}
fig3g_lmm1_emm <- list()
fig3g_aov1_emm <- list()
for(i in 1:length(y_list)){
y_label <- y_list[i]
fig3g_lmm1_emm[[y_label]] <- emmeans_out(fig3g_lmm1[[y_label]])
fig3g_aov1_emm[[y_label]] <- emmeans_out(fig3g_aov1[[y_label]])
}
pairs_out <- function(m1_emm){
# m1 is the fit model
m1_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE) |>
data.table()
return(m1_pairs)
}
fig3g_lmm1_pairs <- list()
fig3g_aov1_pairs <- list()
for(i in 1:length(y_list)){
y_label <- y_list[i]
fig3g_lmm1_pairs[[y_label]] <- pairs_out(fig3g_lmm1_emm[[y_label]])
fig3g_aov1_pairs[[y_label]] <- pairs_out(fig3g_aov1_emm[[y_label]])
}
anova(fig3g_lmm1[["ucp1"]]) |>
kable(digits = 4,
caption = "LMM fit") |>
kable_styling()
anova(fig3g_aov1[["ucp1"]]) |>
kable(digits = 4, caption = "RM ANOVA fit") |>
kable_styling()
# create a column of sidak adjusted p-values in the contrast tables
for(i in 1:length(y_list)){ # over the 6 responses
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
m1_pairs[3:4, p_sidak := Sidak.p.adjust(p.value)]
fig3g_lmm1_pairs[[y_list[i]]] <- m1_pairs
}
# make a pretty output table
contrast_table <- data.table(NULL)
keep_cols <- c("tx", "contrast", "estimate", "p_sidak")
for(i in 1:length(y_list)){ # over the 6 responses
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
contrast_table <- rbind(contrast_table,
m1_pairs[3:4, .SD, .SDcols = keep_cols])
}
contrast_table |>
kable(digits = 4) |>
kable_styling() |>
pack_rows(y_list[1], 1, 2) |>
pack_rows(y_list[2], 3, 4) |>
pack_rows(y_list[3], 5, 6) |>
pack_rows(y_list[4], 7, 8) |>
pack_rows(y_list[5], 9, 10) |>
pack_rows(y_list[6], 11, 12)
# this seems ultra klunky but it works
p <- numeric(length(y_list))
for(j in 1:4){ # do this for each simple effect in the contrast table
for(i in 1:length(y_list)){ # over the 6 responses
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
p[i] <- m1_pairs[j, p.value]
}
p_adj <- p.adjust(p, "fdr")
for(i in 1:length(y_list)){ # over the 6 responses
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
m1_pairs[j, p_fdr := p_adj[i]]
fig3g_lmm1_pairs[[y_list[i]]] <- m1_pairs
}
}
# create a table of p-values for cre contrasts only
out_table <- data.table(
response = y_list,
Sal_p = numeric(length(y_list)),
OHDA_p = numeric(length(y_list)),
Sal_fdr = numeric(length(y_list)),
OHDA_fdr = numeric(length(y_list))
)
for(i in 1:length(y_list)){ # over the 6 responses
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
out_table[response == y_list[[i]], Sal_p := m1_pairs[3, p.value]]
out_table[response == y_list[[i]], OHDA_p:= m1_pairs[4, p.value]]
out_table[response == y_list[[i]], Sal_fdr := m1_pairs[3, p_fdr]]
out_table[response == y_list[[i]], OHDA_fdr := m1_pairs[4, p_fdr]]
}
out_table |>
kable(caption = "unadjusted and FDR adjust p-values for Cre+ - Cre- contrasts within Saline and 6-OHDA treatments") |>
kable_styling()
fig3g[, cre := ifelse(surgery == "YFP", "Cre-", "Cre+")]
fig3g[, ohda := ifelse(tx == "SAL", "SAL", "6-OHDA")]
fig3g[, treatment := paste(ohda, cre, sep = "\n") |>
factor(levels = c("SAL\nCre-", "SAL\nCre+", "6-OHDA\nCre-", "6-OHDA\nCre+"))]
plot_it <- function(y_col,
m1_pairs){
gg <- ggplot(data = fig3g,
aes(x = treatment,
y = get(y_col))) +
geom_point(aes(color = surgery),
size = 2,
show.legend = FALSE) +
geom_line(aes(group = ear_tag),
color = "gray") +
ylab("Log 2 Fold Change") +
ggtitle(y_col) +
scale_color_manual(values = pal_okabe_ito_2) +
theme_pubr() +
theme(axis.title.x = element_blank())
# add p-values
p_table <- data.table(
group1 = c("SAL\nCre-", "6-OHDA\nCre-"),
group2 = c("SAL\nCre+", "6-OHDA\nCre+"),
p = m1_pairs[3:4, p_sidak] |>
p_round(digits = 4) |> #rstatix package
p_format(digits = 4, #rstatix package
accuracy = 1e-04,
add.p = TRUE),
y.position = fig3g[, max(get(y_col))] +
0.05*(fig3g[, max(get(y_col))] - fig3g[, min(get(y_col))])
)
gg <- gg +
stat_pvalue_manual(
data = p_table,
tip.length = 0.001)
return(gg)
}
gg_list <- list()
for(i in 1:length(y_list)){
m1 <- fig3g_lmm1[[y_list[i]]]
m1_emm <- fig3g_lmm1_emm[[y_list[i]]]
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
# use the sidak p-values
m1_pairs[, p.value := p_sidak]
gg <- plot_it(y_col = y_list[i], m1_pairs)
gg_list[[y_list[i]]] <- gg
}
plot_grid(plotlist = gg_list, nrow = 2)
for(i in 1:length(y_list)){
m1 <- fig3g_lmm1[[y_list[i]]]
}
fig3g[, cre := ifelse(surgery == "YFP", "Cre-", "Cre+")]
fig3g[, ohda := ifelse(tx == "SAL", "SAL", "6-OHDA")]
fig3g[, treatment := paste(ohda, cre, sep = "\n") |>
factor(levels = c("SAL\nCre-", "SAL\nCre+", "6-OHDA\nCre-", "6-OHDA\nCre+"))]
plot_it <- function(y_col,
m1_pairs){
gg <- ggplot(data = fig3g,
aes(x = treatment,
y = get(y_col))) +
geom_point(aes(color = surgery),
size = 2,
show.legend = FALSE) +
geom_line(aes(group = ear_tag),
color = "gray") +
ylab("Log 2 Fold Change") +
ggtitle(y_col) +
scale_color_manual(values = pal_okabe_ito_2) +
theme_pubr() +
theme(axis.title.x = element_blank())
# add p-values
p_table <- data.table(
group1 = c("SAL\nCre-", "6-OHDA\nCre-"),
group2 = c("SAL\nCre+", "6-OHDA\nCre+"),
p = m1_pairs[3:4, p_sidak] |>
p_round(digits = 4) |> #rstatix package
p_format(digits = 4, #rstatix package
accuracy = 1e-04,
add.p = TRUE),
y.position = fig3g[, max(get(y_col))] +
0.05*(fig3g[, max(get(y_col))] - fig3g[, min(get(y_col))])
)
gg <- gg +
stat_pvalue_manual(
data = p_table,
tip.length = 0.001)
return(gg)
}
gg_list <- list()
for(i in 1:length(y_list)){
m1 <- fig3g_lmm1[[y_list[i]]]
m1_emm <- fig3g_lmm1_emm[[y_list[i]]]
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
# use the sidak p-values
m1_pairs[, p.value := p_sidak]
gg <- plot_it(y_col = y_list[i], m1_pairs)
gg_list[[y_list[i]]] <- gg
}
plot_grid(plotlist = gg_list, nrow = 2)
names(fig3g)
y_list_ref <- paste0(y_list, "_ref")
y_list_ref
# reflect the values in the response variables
fig3g[, ucp1_ref := -ucp1]
fig3g[, elovl3_ref := -elovl3]
fig3g[, cidea_ref := -cidea]
fig3g[, fasn_ref := -fasn]
fig3g[, acacb_ref := -acacb]
fig3g[, ch_reb_pb_ref := -ch_reb_pb]
y_list_ref <- paste0(y_list, "_ref")
gg_list <- list()
for(i in 1:length(y_list)){
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
# use the sidak p-values
m1_pairs[, p.value := p_sidak]
gg <- plot_it(y_col = y_list_ref[i], m1_pairs)
gg_list[[y_list[i]]] <- gg
}
plot_grid(plotlist = gg_list, nrow = 2)
fig3g_lmm1_pairs[["ucp1"]]
fig3g_lmm1_emm[["ucp1"]]
3
2^(-3)
log2(3)
log2(1)
log2(2)
log2(3)
2^(log2(3))
writexl::write_xlsx(fig3g)
writexl::write_xlsx(fig3g, "fig3g.xlsx")
install.packages('jmvtools', repos=c('https://repo.jamovi.org', 'https://cran.r-project.org'))
jmvtools::check()
