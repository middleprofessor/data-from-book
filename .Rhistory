"Fold Change" = 10^coef(summary(m1_trm))[2, 1],
Cohen = coef(summary(m1_trm))[2, 1]/summary(m1_trm)$sigma
)
)
m1_bulk <- lm(bulk ~ treatment, data = fig4h)
stats_table <- rbind(stats_table,
data.table(
Response = "Bulk",
Difference = coef(summary(m1_bulk))[2, 1],
"Fold Change" = 10^coef(summary(m1_bulk))[2, 1],
Cohen = coef(summary(m1_bulk))[2, 1]/summary(m1_bulk)$sigma
)
)
stats_table |>
kable(digits = c(1,3,2,2)) |>
kable_styling()
# Chunk 5
set.seed(1)
n_reps <- 2000
d_out <- matrix(as.numeric(NA), nrow = n_reps, ncol = 3)
t_out <- matrix(as.numeric(NA), nrow = n_reps, ncol = 3)
colnames(d_out) <- c("TEFF", "TRM", "Bulk")
colnames(t_out) <- c("TEFF", "TRM", "Bulk")
tngfr_teff <- fig4h[treatment == "tNGFR", teff] |>
na.omit()
fox_teff <- fig4h[treatment == "FOXO1OE", teff] |>
na.omit()
tngfr_trm <- fig4h[treatment == "tNGFR", trm] |>
na.omit()
fox_trm <- fig4h[treatment == "FOXO1OE", trm] |>
na.omit()
tngfr_bulk <- fig4h[treatment == "tNGFR", bulk] |>
na.omit()
fox_bulk <- fig4h[treatment == "FOXO1OE", bulk] |>
na.omit()
for(i in 1:n_reps){
t_teff <- t.test(sample(tngfr_teff, 5, replace = TRUE),
sample(fox_teff, 5, replace = TRUE),
equal.var = TRUE)
t_trm <- t.test(sample(tngfr_trm, 5, replace = TRUE),
sample(fox_trm, 5, replace = TRUE),
equal.var = TRUE)
t_bulk <- t.test(sample(tngfr_bulk, 5, replace = TRUE),
sample(fox_bulk, 5, replace = TRUE),
equal.var = TRUE)
d_out[i, "TEFF"] <- t_teff$estimate |> diff()
d_out[i, "TRM"] <- t_trm$estimate |> diff()
d_out[i, "Bulk"] <- t_bulk$estimate |> diff()
t_out[i, "TEFF"] <- -t_teff$statistic
t_out[i, "TRM"] <- -t_trm$statistic
t_out[i, "Bulk"] <- -t_bulk$statistic
}
ci <- function(x){
return(quantile(x, c(0.025, 0.975)))
}
ci_df <- apply(d_out, 2, ci)
ci_table <- data.table(
Response = colnames(ci_df),
t(ci_df)
)
ci_table |>
kable(caption = "95% CIs of each response",
digits = c(2, 2, 2)) |>
kable_styling(full_width = FALSE)
lt0 <- function(x){
return(sum(x < 0))
}
p <- apply(t_out, 2, lt0)/n_reps
p_table <- data.table(
Response = names(p),
p = p)
p_table |>
kable(caption = "Resampled p-values of each response",
digits = 2) |>
kable_styling(full_width = FALSE)
# Chunk 6
t_to_p <- function(t){
p <- 2 * pt(-abs(t), df = n * 2 - 2, lower.tail = TRUE)
return(p)
}
set.seed(1)
n_reps <- 2000
n <- 5
n_ss <- 1500
sigma_total <- summary(m1_teff)$sigma # estimated SD for TEFF
delta <- .219 # observed difference for TEFF
icc_vec <- c(0.001, 0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.3, 0.5, 0.75)
t <- numeric(n_reps)
table_out <- data.table(NULL)
#sigma_a^2: the variance among mice
#sigma_e^2: the error variance (within mice)
for(sim_i in 1:length(icc_vec)){
icc <- icc_vec[sim_i]
# icc = sigma_a^2/sigma_total^2
sigma_a <- sqrt(icc * sigma_total^2)
# sigma_total^2 = sigma_a^2 + sigma_e^2
sigma_e <- sqrt(sigma_total^2 - sigma_a^2)
for(rep_i in 1:n_reps){
tngfr_means <- rnorm(n, sd = sigma_a)
fox_means <- rnorm(n, sd = sigma_a) + delta
# slow
tngfr <- rnorm(n * n_ss, mean = rep(tngfr_means, each = n_ss), sd = sigma_e) |>
matrix(nrow = n_ss, ncol = n) |>
apply(2, mean)
fox <- rnorm(n * n_ss, mean = rep(fox_means, each = n_ss), sd = sigma_e) |>
matrix(nrow = n_ss, ncol = n) |>
apply(2, mean)
# fast shortcut since the estimated mean will be so close to true mean
# tngfr <- tngfr_means
# fox <- fox_means
t[rep_i] <- t.test(tngfr, fox, var.equal = TRUE)$statistic
}
p <- t_to_p(t)
table_out <- rbind(
table_out,
data.table(
icc = icc,
t = mean(t),
power = sum(p < 0.05)/n_reps
)
)
}
table_out[, p := 2 * pt(t, df = n * 2 - 2, lower.tail = TRUE)]
gg1 <- ggplot(data = table_out,
aes(x = icc,
y = p)) +
geom_line() +
geom_hline(yintercept = 0.05, linetype = "dashed") +
theme_pubr()
gg2 <- ggplot(data = table_out,
aes(x = icc,
y = power)) +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
theme_pubr()
plot_grid(gg1, gg2, ncol = 2, labels = "AUTO")
# Chunk 7
set.seed(1)
n_reps <- 2000
n <- 5
n_ss <- 1500
sigma_total <- summary(m1_teff)$sigma
icc_vec <- c(0, 0.001, 0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.3, 0.5, 0.75)
p <- numeric(n_reps)
table_out <- data.table(NULL)
#sigma_a^2: the variance among mice
#sigma_e^2: the error variance (within mice)
for(sim_i in 1:length(icc_vec)){
icc <- icc_vec[sim_i]
# icc = sigma_a^2/sigma_total^2
sigma_a <- sqrt(icc * sigma_total^2)
# sigma_total^2 = sigma_a^2 + sigma_e^2
sigma_e <- sqrt(sigma_total^2 - sigma_a^2)
for(rep_i in 1:n_reps){
mean_vec <- rep(rnorm(n, sd = sigma_a), each = n_ss)
samp_1 <- rnorm(n * n_ss, mean = mean_vec, sd = sigma_e)
mean_vec <- rep(rnorm(n, sd = sigma_a), each = n_ss)
samp_2 <- rnorm(n * n_ss, mean = mean_vec, sd = sigma_e)
p[rep_i] <- t.test(samp_1, samp_2, var.equal = TRUE)$p.value
}
table_out <- rbind(
table_out,
data.table(
icc = icc,
Type_I = sum(p < 0.05)/n_reps
)
)
}
ggplot(data = table_out,
aes(x = icc,
y = Type_I)) +
geom_line() +
geom_hline(yintercept = 0.05, linetype = "dashed") +
theme_pubr()
library(ggplot2)
library(data.table)
fd <- data.table(
x = rnorm(100)
y = rnorm(100)
fd <- data.table(
x = rnorm(100),
y = rnorm(100)
)
ggplot(data = fd,
aes(x = x, y = y)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
# wrangling packages
library(here) # here makes a project transportable
library(janitor) # clean_names
library(readxl) # read excel, duh!
library(data.table) # magical data frames
library(magrittr) # pipes
library(stringr) # string functions
library(forcats) # factor functions
# analysis packages
library(emmeans) # the workhorse for inference
library(nlme) # gls and some lmm
library(lme4) # linear mixed models
library(lmerTest) # linear mixed model inference
library(afex) # ANOVA linear models
library(glmmTMB) # generalized linear models
library(MASS) # negative binomial and some other functions
library(car) # model checking and ANOVA
library(DHARMa) # model checking
library(mvtnorm)
# graphing packages
library(ggsci) # color palettes
library(ggpubr) # publication quality plots
library(ggforce) # better jitter
library(cowplot) # combine plots
library(knitr) # kable tables
library(kableExtra) # kable_styling tables
# ggplot_the_model.R packages not loaded above
library(insight)
library(lazyWeave)
# use here from the here package
here <- here::here
# use clean_names from the janitor package
clean_names <- janitor::clean_names
# use transpose from data.table
transpose <- data.table::transpose
# load functions used by this text written by me
# ggplot_the_model.R needs to be in the folder "R"
# if you didn't download this and add to your R folder in your
# project, then this line will cause an error
source_path <- here("R", "ggplot_the_model.R")
source(source_path)
data_folder <- "data"
image_folder <- "images"
output_folder <- "output"
data_from <- "The role of somatosensory innervation of adipose tissues"
file_name <- "41586_2022_5137_MOESM7_ESM.xlsx"
file_path <- here(data_folder, data_from, file_name)
fig3g <- read_excel(file_path,
sheet = "3g",
range = "B6:K30",
col_names = TRUE) %>%
data.table() %>%
clean_names()
knitr::opts_chunk$set(echo = TRUE)
# wrangling packages
library(here) # here makes a project transportable
library(janitor) # clean_names
library(readxl) # read excel, duh!
library(data.table) # magical data frames
library(magrittr) # pipes
library(stringr) # string functions
library(forcats) # factor functions
# analysis packages
library(emmeans) # the workhorse for inference
library(nlme) # gls and some lmm
library(lme4) # linear mixed models
library(lmerTest) # linear mixed model inference
library(afex) # ANOVA linear models
library(glmmTMB) # generalized linear models
library(MASS) # negative binomial and some other functions
library(car) # model checking and ANOVA
library(DHARMa) # model checking
library(mvtnorm)
# graphing packages
library(ggsci) # color palettes
library(ggpubr) # publication quality plots
library(ggforce) # better jitter
library(cowplot) # combine plots
library(knitr) # kable tables
library(kableExtra) # kable_styling tables
# ggplot_the_model.R packages not loaded above
library(insight)
library(lazyWeave)
# use here from the here package
here <- here::here
# use clean_names from the janitor package
clean_names <- janitor::clean_names
# use transpose from data.table
transpose <- data.table::transpose
# load functions used by this text written by me
# ggplot_the_model.R needs to be in the folder "R"
# if you didn't download this and add to your R folder in your
# project, then this line will cause an error
source_path <- here("R", "ggplot_the_model.R")
source(source_path)
data_folder <- "data from"
image_folder <- "images"
output_folder <- "output"
data_from <- "The role of somatosensory innervation of adipose tissues"
file_name <- "41586_2022_5137_MOESM7_ESM.xlsx"
file_path <- here(data_folder, data_from, file_name)
fig3g <- read_excel(file_path,
sheet = "3g",
range = "B6:K30",
col_names = TRUE) %>%
data.table() %>%
clean_names()
fig3g[, surgery := factor(surgery, levels = c("YFP", "Cre"))]
fig3g[, tx := factor(tx, levels = c("SAL", "OHDA"))]
f3g_ucp1_lmm1 <- lmer(ucp1 ~ surgery * tx + (1 | ear_tag),
data = fig3g)
f3g_ucp1_aov1 <- aov_4(ucp1 ~ surgery * tx + (surgery | ear_tag),
data = fig3g)
f3g_ucp1_lmm2 <- mixed(ucp1 ~ surgery * tx + (1 | ear_tag),
data = fig3g)
anova(f3g_ucp1_lmm1)
anova(f3g_ucp1_aov1)
anova(f3g_ucp1_lmm2)
f3g_ucp1_lmm1_pairs <- emmeans(f3g_ucp1_lmm1,
specs = c("surgery", "tx")) %>%
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_aov1_pairs <- emmeans(f3g_ucp1_aov1,
specs = c("surgery", "tx")) %>%
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_lmm2_pairs <- emmeans(f3g_ucp1_lmm2,
specs = c("surgery", "tx")) %>%
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_lmm1_pairs
f3g_ucp1_aov1_pairs
f3g_ucp1_lmm2_pairs
View(fig3g)
unique(fig3g$surgery)
unique(fig3g$tx)
data_from <- "The role of somatosensory innervation of adipose tissues"
file_name <- "41586_2022_5137_MOESM7_ESM.xlsx"
file_path <- here(data_folder, data_from, file_name)
fig3g <- read_excel(file_path,
sheet = "3g",
range = "B6:K30",
col_names = TRUE) %>%
data.table() %>%
clean_names()
fig3g[, surgery := factor(surgery, levels = c("Cre", "YFP"))]
fig3g[, tx := factor(tx, levels = c("SAL", "OHDA"))]
f3g_ucp1_lmm1 <- lmer(ucp1 ~ surgery * tx + (1 | ear_tag),
data = fig3g)
f3g_ucp1_aov1 <- aov_4(ucp1 ~ surgery * tx + (surgery | ear_tag),
data = fig3g)
f3g_ucp1_lmm2 <- mixed(ucp1 ~ surgery * tx + (1 | ear_tag),
data = fig3g)
ggplot_the_response(f3g_ucp1_lmm1,
f3g_ucp1_lmm1_emm,
f3g_ucp1_lmm1_pairs)
ggplot_the_response(f3g_ucp1_lmm1,
summary(f3g_ucp1_lmm1_emm),
f3g_ucp1_lmm1_pairs)
ggplot_the_response(f3g_ucp1_lmm1,
data.frame(f3g_ucp1_lmm1_emm),
f3g_ucp1_lmm1_pairs)
f3g_ucp1_lmm1_emm
f3g_ucp1_lmm1_emm <- emmeans(f3g_ucp1_lmm1,
specs = c("surgery", "tx"))
f3g_ucp1_lmm1_pairs <- f3g_ucp1_lmm1_emm |>
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_aov1_pairs <- emmeans(f3g_ucp1_aov1,
specs = c("surgery", "tx")) |>
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_lmm2_pairs <- emmeans(f3g_ucp1_lmm2,
specs = c("surgery", "tx")) |>
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_lmm1_pairs
f3g_ucp1_aov1_pairs
f3g_ucp1_lmm2_pairs
ggplot_the_response(f3g_ucp1_lmm1,
f3g_ucp1_lmm1_emm,
f3g_ucp1_lmm1_pairs)
f3g_ucp1_lmm1 <- lmer(ucp1 ~ tx * surgery + (1 | ear_tag),
data = fig3g)
f3g_ucp1_aov1 <- aov_4(ucp1 ~ surgery * tx + (surgery | ear_tag),
data = fig3g)
f3g_ucp1_lmm2 <- mixed(ucp1 ~ surgery * tx + (1 | ear_tag),
data = fig3g)
f3g_ucp1_lmm1_emm <- emmeans(f3g_ucp1_lmm1,
specs = c("surgery", "tx"))
f3g_ucp1_lmm1_pairs <- f3g_ucp1_lmm1_emm |>
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_aov1_pairs <- emmeans(f3g_ucp1_aov1,
specs = c("surgery", "tx")) |>
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_lmm2_pairs <- emmeans(f3g_ucp1_lmm2,
specs = c("surgery", "tx")) |>
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_lmm1_pairs
f3g_ucp1_aov1_pairs
f3g_ucp1_lmm2_pairs
ggplot_the_response(f3g_ucp1_lmm1,
f3g_ucp1_lmm1_emm,
f3g_ucp1_lmm1_pairs)
f3g_ucp1_lmm1_emm <- emmeans(f3g_ucp1_lmm1,
specs = c("tx", "surgery"))
f3g_ucp1_lmm1_pairs <- f3g_ucp1_lmm1_emm |>
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_aov1_pairs <- emmeans(f3g_ucp1_aov1,
specs = c("tx", "surgery")) |>
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_lmm2_pairs <- emmeans(f3g_ucp1_lmm2,
specs = c("tx", "surgery")) |>
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_lmm1_pairs
f3g_ucp1_aov1_pairs
f3g_ucp1_lmm2_pairs
ggplot_the_response(f3g_ucp1_lmm1,
f3g_ucp1_lmm1_emm,
f3g_ucp1_lmm1_pairs)
f3g_ucp1_lmm1 <- lmer(ucp1 ~ tx * surgery + (1 | ear_tag),
data = fig3g)
f3g_ucp1_aov1 <- aov_4(ucp1 ~ tx * surgery + (surgery | ear_tag),
data = fig3g)
f3g_ucp1_lmm2 <- mixed(ucp1 ~ tx * surgery + (1 | ear_tag),
data = fig3g)
f3g_ucp1_lmm1_emm <- emmeans(f3g_ucp1_lmm1,
specs = c("tx", "surgery"))
f3g_ucp1_lmm1_pairs <- f3g_ucp1_lmm1_emm |>
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_aov1_pairs <- emmeans(f3g_ucp1_aov1,
specs = c("tx", "surgery")) |>
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_lmm2_pairs <- emmeans(f3g_ucp1_lmm2,
specs = c("tx", "surgery")) |>
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_lmm1_pairs
f3g_ucp1_aov1_pairs
f3g_ucp1_lmm2_pairs
f3g_ucp1_lmm1_emm <- emmeans(f3g_ucp1_lmm1,
specs = c("tx", "surgery"))
f3g_ucp1_lmm1_pairs <- f3g_ucp1_lmm1_emm |>
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_aov1_pairs <- emmeans(f3g_ucp1_aov1,
specs = c("tx", "surgery")) |>
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_lmm2_pairs <- emmeans(f3g_ucp1_lmm2,
specs = c("tx", "surgery")) |>
contrast(method = "revpairwise",
simple = "each",
combine = TRUE,
adjust = "none") |>
summary(infer = TRUE)
f3g_ucp1_lmm1_pairs
f3g_ucp1_aov1_pairs
f3g_ucp1_lmm2_pairs
chunk_output_type: console
f3g_ucp1_lmm1 <- lmer(ucp1 ~ tx * surgery + (1 | ear_tag),
data = fig3g)
f3g_ucp1_aov1 <- aov_4(ucp1 ~ tx * surgery + (surgery | ear_tag),
data = fig3g)
f3g_ucp1_lmm2 <- mixed(ucp1 ~ tx * surgery + (1 | ear_tag),
data = fig3g)
