for(i in 1:length(y_list)){ # over the 6 responses
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
p[i] <- m1_pairs[j, p.value]
}
p_adj <- p.adjust(p, "fdr")
for(i in 1:length(y_list)){ # over the 6 responses
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
m1_pairs[j, p_fdr := p_adj[i]]
fig3g_lmm1_pairs[[y_list[i]]] <- m1_pairs
}
}
# create a table of p-values for cre contrasts only
out_table <- data.table(
response = y_list,
Sal_p = numeric(length(y_list)),
OHDA_p = numeric(length(y_list)),
Sal_fdr = numeric(length(y_list)),
OHDA_fdr = numeric(length(y_list))
)
for(i in 1:length(y_list)){ # over the 6 responses
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
out_table[response == y_list[[i]], Sal_p := m1_pairs[3, p.value]]
out_table[response == y_list[[i]], OHDA_p:= m1_pairs[4, p.value]]
out_table[response == y_list[[i]], Sal_fdr := m1_pairs[3, p_fdr]]
out_table[response == y_list[[i]], OHDA_fdr := m1_pairs[4, p_fdr]]
}
out_table |>
kable(caption = "unadjusted and FDR adjust p-values for Cre+ - Cre- contrasts within Saline and 6-OHDA treatments") |>
kable_styling()
fig3g[, cre := ifelse(surgery == "YFP", "Cre-", "Cre+")]
fig3g[, ohda := ifelse(tx == "SAL", "SAL", "6-OHDA")]
fig3g[, treatment := paste(ohda, cre, sep = "\n") |>
factor(levels = c("SAL\nCre-", "SAL\nCre+", "6-OHDA\nCre-", "6-OHDA\nCre+"))]
plot_it <- function(y_col,
m1_pairs){
gg <- ggplot(data = fig3g,
aes(x = treatment,
y = get(y_col))) +
geom_point(aes(color = surgery),
size = 2,
show.legend = FALSE) +
geom_line(aes(group = ear_tag),
color = "gray") +
ylab("Log 2 Fold Change") +
ggtitle(y_col) +
scale_color_manual(values = pal_okabe_ito_2) +
theme_pubr() +
theme(axis.title.x = element_blank())
# add p-values
p_table <- data.table(
group1 = c("SAL\nCre-", "6-OHDA\nCre-"),
group2 = c("SAL\nCre+", "6-OHDA\nCre+"),
p = m1_pairs[3:4, p_sidak] |>
p_round(digits = 4) |> #rstatix package
p_format(digits = 4, #rstatix package
accuracy = 1e-04,
add.p = TRUE),
y.position = fig3g[, max(get(y_col))] +
0.05*(fig3g[, max(get(y_col))] - fig3g[, min(get(y_col))])
)
gg <- gg +
stat_pvalue_manual(
data = p_table,
tip.length = 0.001)
return(gg)
}
gg_list <- list()
for(i in 1:length(y_list)){
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
# use the sidak p-values
m1_pairs[, p.value := p_sidak]
gg <- plot_it(y_col = y_list[i], m1_pairs)
gg_list[[y_list[i]]] <- gg
}
plot_grid(plotlist = gg_list, nrow = 2)
# reflect the values in the response variables
fig3g[, ucp1_ref := -ucp1]
fig3g[, elovl3_ref := -elovl3]
fig3g[, cidea_ref := -cidea]
fig3g[, fasn_ref := -fasn]
fig3g[, acacb_ref := -acacb]
fig3g[, ch_reb_pb_ref := -ch_reb_pb]
y_list_ref <- paste0(y_list, "_ref")
gg_list <- list()
for(i in 1:length(y_list)){
m1_pairs <- fig3g_lmm1_pairs[[y_list[i]]]
# use the sidak p-values
m1_pairs[, p.value := p_sidak]
gg <- plot_it(y_col = y_list_ref[i], m1_pairs)
gg_list[[y_list[i]]] <- gg
}
plot_grid(plotlist = gg_list, nrow = 2)
for(i in 1:length(y_list)){
m1 <- fig3g_lmm1[[y_list[i]]]
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# wrangling packages
library(here) # here makes a project transportable
library(janitor) # clean_names
library(readxl) # read excel, duh!
library(writexl) # write excel, duh!
library(data.table) # magical data frames
library(magrittr) # pipes
library(stringr) # string functions
library(forcats) # factor functions
# analysis packages
library(emmeans) # the workhorse for inference
library(nlme) # gls and some lmm
library(lme4) # linear mixed models
library(lmerTest) # linear mixed model inference
library(afex) # ANOVA linear models
library(glmmTMB) # generalized linear models
library(MASS) # negative binomial and some other functions
library(car) # model checking and ANOVA
library(DHARMa) # model checking
library(mvtnorm)
# graphing packages
library(ggsci) # color palettes
library(ggpubr) # publication quality plots
library(ggforce) # better jitter
library(cowplot) # combine plots
library(knitr) # kable tables
library(kableExtra) # kable_styling tables
# ggplot_the_model.R packages not loaded above
library(insight)
library(lazyWeave)
# use here from the here package
here <- here::here
# use clean_names from the janitor package
clean_names <- janitor::clean_names
# use transpose from data.table
transpose <- data.table::transpose
# load functions used by this text written by me
# ggplot_the_model.R needs to be in the folder "R"
# if you didn't download this and add to your R folder in your
# project, then this line will cause an error
source_path <- here("R", "ggplot_the_model.R")
source(source_path)
data_folder <- "data from"
image_folder <- "images"
output_folder <- "output"
# Chunk 2: fig-4h-import
data_from <- "FOXO1 is a master regulator of memory programming in CAR T cells"
file_name <- "41586_2024_7300_MOESM9_ESM.xlsx"
file_path <- here(data_folder, data_from, file_name)
fig4h_wide <- read_excel(file_path,
sheet = "Figure 4i",
range = "A4:h7659",
col_names = TRUE) |>
data.table()
setnames(fig4h_wide,
old = names(fig4h_wide),
new = c("tNGFR_teff", "FOXO1OE_teff", "x1",
"tNGFR_trm", "FOXO1OE_trm", "x2",
"tNGFR_bulk", "FOXO1OE_bulk"))
fig4h_wide <- fig4h_wide[, .SD, .SDcols = c("tNGFR_teff", "FOXO1OE_teff",
"tNGFR_trm", "FOXO1OE_trm",
"tNGFR_bulk", "FOXO1OE_bulk")]
fig4h <- melt(fig4h_wide,
measure.vars = list(c("tNGFR_teff", "FOXO1OE_teff"),
c("tNGFR_trm", "FOXO1OE_trm"),
c("tNGFR_bulk", "FOXO1OE_bulk")),
variable.name = "treatment_code",
value.name = c("teff", "trm", "bulk"))
fig4h[, treatment := ifelse(treatment_code == 1, "tNGFR", "FOXO1OE") |>
factor(levels = c("tNGFR", "FOXO1OE"))]
# Chunk 3
fig4h_long <- melt(fig4h,
id.vars = "treatment",
measure.vars = c("teff", "trm", "bulk"),
variable.name = "response",
value.name = "score")
fig4h_summary <- fig4h_long[!is.na(score), .(N = .N,
mean = mean(score, na.rm = TRUE),
sd = sd(score, na.rm = TRUE)),
by = .(treatment, response)]
fig4h_summary |>
kable(caption = "Summary data of three response measures",
digits = c(1,1,0,3,3)) |>
kable_styling()
# Chunk 4
m1_teff <- lm(teff ~ treatment, data = fig4h)
#coef(summary(m1_teff))
stats_table <- data.table(
Response = "TEFF",
Difference = coef(summary(m1_teff))[2, 1],
"Fold Change" = 10^coef(summary(m1_teff))[2, 1],
Cohen = coef(summary(m1_teff))[2, 1]/summary(m1_teff)$sigma
)
m1_trm <- lm(trm ~ treatment, data = fig4h)
stats_table <- rbind(stats_table,
data.table(
Response = "TRM",
Difference = coef(summary(m1_trm))[2, 1],
"Fold Change" = 10^coef(summary(m1_trm))[2, 1],
Cohen = coef(summary(m1_trm))[2, 1]/summary(m1_trm)$sigma
)
)
m1_bulk <- lm(bulk ~ treatment, data = fig4h)
stats_table <- rbind(stats_table,
data.table(
Response = "Bulk",
Difference = coef(summary(m1_bulk))[2, 1],
"Fold Change" = 10^coef(summary(m1_bulk))[2, 1],
Cohen = coef(summary(m1_bulk))[2, 1]/summary(m1_bulk)$sigma
)
)
stats_table |>
kable(digits = c(1,3,2,2)) |>
kable_styling()
# Chunk 5
set.seed(1)
n_reps <- 2000
d_out <- matrix(as.numeric(NA), nrow = n_reps, ncol = 3)
t_out <- matrix(as.numeric(NA), nrow = n_reps, ncol = 3)
colnames(d_out) <- c("TEFF", "TRM", "Bulk")
colnames(t_out) <- c("TEFF", "TRM", "Bulk")
tngfr_teff <- fig4h[treatment == "tNGFR", teff] |>
na.omit()
fox_teff <- fig4h[treatment == "FOXO1OE", teff] |>
na.omit()
tngfr_trm <- fig4h[treatment == "tNGFR", trm] |>
na.omit()
fox_trm <- fig4h[treatment == "FOXO1OE", trm] |>
na.omit()
tngfr_bulk <- fig4h[treatment == "tNGFR", bulk] |>
na.omit()
fox_bulk <- fig4h[treatment == "FOXO1OE", bulk] |>
na.omit()
for(i in 1:n_reps){
t_teff <- t.test(sample(tngfr_teff, 5, replace = TRUE),
sample(fox_teff, 5, replace = TRUE),
equal.var = TRUE)
t_trm <- t.test(sample(tngfr_trm, 5, replace = TRUE),
sample(fox_trm, 5, replace = TRUE),
equal.var = TRUE)
t_bulk <- t.test(sample(tngfr_bulk, 5, replace = TRUE),
sample(fox_bulk, 5, replace = TRUE),
equal.var = TRUE)
d_out[i, "TEFF"] <- t_teff$estimate |> diff()
d_out[i, "TRM"] <- t_trm$estimate |> diff()
d_out[i, "Bulk"] <- t_bulk$estimate |> diff()
t_out[i, "TEFF"] <- -t_teff$statistic
t_out[i, "TRM"] <- -t_trm$statistic
t_out[i, "Bulk"] <- -t_bulk$statistic
}
ci <- function(x){
return(quantile(x, c(0.025, 0.975)))
}
ci_df <- apply(d_out, 2, ci)
ci_table <- data.table(
Response = colnames(ci_df),
t(ci_df)
)
ci_table |>
kable(caption = "95% CIs of each response",
digits = c(2, 2, 2)) |>
kable_styling(full_width = FALSE)
lt0 <- function(x){
return(sum(x < 0))
}
p <- apply(t_out, 2, lt0)/n_reps
p_table <- data.table(
Response = names(p),
p = p)
p_table |>
kable(caption = "Resampled p-values of each response",
digits = 2) |>
kable_styling(full_width = FALSE)
# Chunk 6
t_to_p <- function(t){
p <- 2 * pt(-abs(t), df = n * 2 - 2, lower.tail = TRUE)
return(p)
}
set.seed(1)
n_reps <- 2000
n <- 5
n_ss <- 1500
sigma_total <- summary(m1_teff)$sigma # estimated SD for TEFF
delta <- .219 # observed difference for TEFF
icc_vec <- c(0.001, 0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.3, 0.5, 0.75)
t <- numeric(n_reps)
table_out <- data.table(NULL)
#sigma_a^2: the variance among mice
#sigma_e^2: the error variance (within mice)
for(sim_i in 1:length(icc_vec)){
icc <- icc_vec[sim_i]
# icc = sigma_a^2/sigma_total^2
sigma_a <- sqrt(icc * sigma_total^2)
# sigma_total^2 = sigma_a^2 + sigma_e^2
sigma_e <- sqrt(sigma_total^2 - sigma_a^2)
for(rep_i in 1:n_reps){
tngfr_means <- rnorm(n, sd = sigma_a)
fox_means <- rnorm(n, sd = sigma_a) + delta
# slow
tngfr <- rnorm(n * n_ss, mean = rep(tngfr_means, each = n_ss), sd = sigma_e) |>
matrix(nrow = n_ss, ncol = n) |>
apply(2, mean)
fox <- rnorm(n * n_ss, mean = rep(fox_means, each = n_ss), sd = sigma_e) |>
matrix(nrow = n_ss, ncol = n) |>
apply(2, mean)
# fast shortcut since the estimated mean will be so close to true mean
# tngfr <- tngfr_means
# fox <- fox_means
t[rep_i] <- t.test(tngfr, fox, var.equal = TRUE)$statistic
}
p <- t_to_p(t)
table_out <- rbind(
table_out,
data.table(
icc = icc,
t = mean(t),
power = sum(p < 0.05)/n_reps
)
)
}
table_out[, p := 2 * pt(t, df = n * 2 - 2, lower.tail = TRUE)]
gg1 <- ggplot(data = table_out,
aes(x = icc,
y = p)) +
geom_line() +
geom_hline(yintercept = 0.05, linetype = "dashed") +
theme_pubr()
gg2 <- ggplot(data = table_out,
aes(x = icc,
y = power)) +
geom_line() +
geom_hline(yintercept = 0.8, linetype = "dashed") +
theme_pubr()
plot_grid(gg1, gg2, ncol = 2, labels = "AUTO")
# Chunk 7
set.seed(1)
n_reps <- 2000
n <- 5
n_ss <- 1500
sigma_total <- summary(m1_teff)$sigma
icc_vec <- c(0, 0.001, 0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.3, 0.5, 0.75)
p <- numeric(n_reps)
table_out <- data.table(NULL)
#sigma_a^2: the variance among mice
#sigma_e^2: the error variance (within mice)
for(sim_i in 1:length(icc_vec)){
icc <- icc_vec[sim_i]
# icc = sigma_a^2/sigma_total^2
sigma_a <- sqrt(icc * sigma_total^2)
# sigma_total^2 = sigma_a^2 + sigma_e^2
sigma_e <- sqrt(sigma_total^2 - sigma_a^2)
for(rep_i in 1:n_reps){
mean_vec <- rep(rnorm(n, sd = sigma_a), each = n_ss)
samp_1 <- rnorm(n * n_ss, mean = mean_vec, sd = sigma_e)
mean_vec <- rep(rnorm(n, sd = sigma_a), each = n_ss)
samp_2 <- rnorm(n * n_ss, mean = mean_vec, sd = sigma_e)
p[rep_i] <- t.test(samp_1, samp_2, var.equal = TRUE)$p.value
}
table_out <- rbind(
table_out,
data.table(
icc = icc,
Type_I = sum(p < 0.05)/n_reps
)
)
}
ggplot(data = table_out,
aes(x = icc,
y = Type_I)) +
geom_line() +
geom_hline(yintercept = 0.05, linetype = "dashed") +
theme_pubr()
knitr::opts_chunk$set(echo = TRUE)
# wrangling packages
library(here) # here makes a project transportable
library(janitor) # clean_names
library(readxl) # read excel, duh!
library(writexl) # write excel, duh!
library(data.table) # magical data frames
library(magrittr) # pipes
library(stringr) # string functions
library(forcats) # factor functions
# analysis packages
library(emmeans) # the workhorse for inference
library(nlme) # gls and some lmm
library(lme4) # linear mixed models
library(lmerTest) # linear mixed model inference
library(afex) # ANOVA linear models
library(glmmTMB) # generalized linear models
library(MASS) # negative binomial and some other functions
library(car) # model checking and ANOVA
library(DHARMa) # model checking
library(mvtnorm)
library(MHTdiscrete) # sidak
# graphing packages
library(ggsci) # color palettes
library(ggpubr) # publication quality plots
library(ggforce) # better jitter
library(cowplot) # combine plots
library(knitr) # kable tables
library(kableExtra) # kable_styling tables
# ggplot_the_model.R packages not loaded above
library(insight)
library(lazyWeave)
# use here from the here package
here <- here::here
# use clean_names from the janitor package
clean_names <- janitor::clean_names
# use transpose from data.table
transpose <- data.table::transpose
# load functions used by this text written by me
# ggplot_the_model.R needs to be in the folder "R"
# if you didn't download this and add to your R folder in your
# project, then this line will cause an error
source_path <- here("R", "ggplot_the_model.R")
source(source_path)
data_folder <- "data from"
image_folder <- "images"
output_folder <- "output"
data_from <- "Pharmacological inhibition of HDAC6 improves muscle phenotypes in dystrophin-deficient mice by downregulating TGF-β via Smad3 acetylation"
file_name <- "ncomms-source-data files OSSENI et al.xlsx"
file_path <- here(data_folder, data_from, file_name)
fig2s_wide <- read_excel(file_path,
sheet = "Figure 2",
range = "E138:J186",
col_names = FALSE) |>
data.table()
mouse_id <- paste("mouse", 1:6, sep = "_")
treatment_levels <- c("MDX-Veh", "MDX-TubA")
mouse_treatment <- paste(rep(treatment_levels, each = 3), mouse_id)
colnames(fig2s_wide) <- mouse_treatment
fig2s <- melt(fig2s_wide,
measure.vars = mouse_treatment,
variable.name = "mouse_treatment",
value.name = "fibrotic_area") |>
na.omit()
fig2s[, c("treatment", "mouse_id") := tstrsplit(mouse_treatment, " ")]
fig2s[, treatment := factor(treatment, levels = treatment_levels)]
file_out_name <- "fig2s-CRDS-Pharmacological inhibition of HDAC6 improves muscle phenotypes in dystrophin-deficient mice by downregulating TGF-β via Smad3 acetylation.xlsx"
fileout_path <- here(data_folder, data_from, file_out_name)
write_xlsx(fig2s, fileout_path)
m0 <- wilcox.test(fig2s[treatment == treatment_levels[1], fibrotic_area], fig2s[treatment == treatment_levels[2], fibrotic_area])
m0
m1 <- lmer(fibrotic_area ~ treatment + (1 | mouse_id), data = fig2s)
m1_emm <- emmeans(m1, specs = "treatment")
m1_pairs <- contrast(m1_emm, method = "revpairwise") |>
summary(infer = TRUE)
m1_pairs
m2 <- aov_4(fibrotic_area ~ treatment + (1 | mouse_id), data = fig2s)
m2_emm <- emmeans(m2, specs = "treatment")
m2_pairs <- contrast(m2_emm, method = "revpairwise") |>
summary(infer = TRUE)
m2_pairs
# get estimated means from linear model
fig2s_means <- fig2s[, .(fibrotic_area = mean(fibrotic_area)), by = .(treatment, mouse_id)]
fig2s_means[, fibrotic_area_model := predict(m1, fig2s_means)]
m1_emm_dt <- m1_emm |>
summary() |>
data.table()
m1_pairs_dt <- m1_pairs |>
data.table()
gg <- ggplot(data = fig2s,
aes(x = treatment,
y = fibrotic_area)) +
# technical reps
geom_jitter(color = "gray",
width = 0.2) +
geom_jitter(data = fig2s_means,
aes(x = treatment,
y = fibrotic_area_model,
color = treatment),
size = 3,
width = 0.1,
show.legend = FALSE) +
# mean and error
geom_point(data = m1_emm_dt,
aes(x = treatment,
y = emmean,
color = treatment),
size = 5,
show.legend = FALSE) +
geom_errorbar(data = m1_emm_dt,
aes(x = treatment,
y = emmean,
ymin = lower.CL, ymax = upper.CL,
color = treatment),
width = 0.05,
show.legend = FALSE) +
ylab("Fibrotic Area") +
scale_color_manual(values = pal_okabe_ito_2) +
theme_pubr() +
theme(axis.title.x = element_blank()) +
NULL
# add p-values
m1_pairs_dt[, group1 := "MDX-TubA"]
m1_pairs_dt[, group2 := "MDX-Veh"]
m1_pairs_dt[, p := p.value |>
p_round(digits = 2) |>
p_format(digits = 2, accuracy = 1e-04, add.p = TRUE)]
maxy <- fig2s[, max(fibrotic_area)]
miny <- fig2s[, min(fibrotic_area)]
m1_pairs_dt[, y.position := maxy + 0.05*(maxy - miny)]
gg <- gg +
stat_pvalue_manual(
data = m1_pairs_dt,
label = "p",
tip.length = 0.001)
gg
save_it <- FALSE
if(save_it){
out_fig <- "fig2s_ggplot.png"
out_path <- here("figs", data_from, out_fig)
ggsave(out_path)
}
install.packages("quarto")
